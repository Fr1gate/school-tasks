<?php
function solve()
{
    if (!isset($_GET["N"]) || !isset($_GET["M"])) {
        return;
    }

    $E = $_GET["N"]; //FATAL ERRORS
    $W = $_GET["M"]; //WARNINGS
    $result = 0;

    /*
        У нас 4 возможных коммита:
        1) не сделать ничего;
        2) убрать ворнинг и прибавить 2; Важно, что это нельзя сделать при нуле ворнингов
        3) убрать 2 ворнинга и прибавить ошибку;
        4) убрать 2 ошибки.
    */

    if ($E < 0 || $W < 0 || $W > 1000 || $E > 1000) {
        $result = -1;
    } else {
        $danger = FALSE;    //можем ли мы нарастить ворнинги
        if ($E == 0) {
            $danger = TRUE;
        }

        $result += floor($W / 2);  //убираем по два ворнинга, но наращиваем ошибки
        
        $E += floor($W / 2);
        
        if ($W % 2) {       //Упс, один остался, придется нарастить ворнинг и убрать два
            $result += 2;
            $E++;
        }


        //Если после этого у нас нечетное число ошибок, то нужно нарастить два ворнинга и исправить их, чтобы получить одну ошибку
        if ($E % 2 && $danger) {    //если мы не можем наращивать ворнинги, то сдаемся
            $result = -1;
        } else {                   
            $result += floor($E / 2);
            if ($E % 2) {           //чтобы исправить одну ошибку нужно сделать такие коммиты: 2) 2) 3) 4)
                $result += 4; 
            }   
        }   
    }
    //  Может показаться, что раз мы оцениваем количество ошибок после того, как мы привели ворнинги к нулю, то нарастить мы их не можем.
    //  Однако это алгоритм не решения задачи, а ее оценки; на деле алгоритм будет следующий:
    //  Сначала делаем нужное число коммитов 2го типа, потом 3го, потом 4го.

    return $result;
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Braind вотрое задание</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="wrapper">
        <h2>Помочь программисту Пете победить эрроры и ворнинги</h2>
        <p>У программиста Пети есть код на PHP. У него было N фатальных ошибок и M ворнингов. 
        Петя решил заставить код работать без ошибок и ворнингов, для чего ему его друг подарил подписку на хорошую IDE и github, 
        так как только с помощью этих инструментов Петя смог бы найти и устранить все проблемы. Петя не очень опытный разработчик. 
        Если Петя исправляет одну фатальную ошибку за коммит, то вместо неё появляется одна новая, если исправляет ворнинг в коммите, 
        то вместо него появляется два новых ворнинга. Если Петя исправляет два ворнинга за один коммит, то появляется одна новая фатальная ошибка, 
        и только когда Петя исправляет сразу две фатальные ошибки за один коммит, то не появляется ничего нового. 
        Петя считает, что код будет полностью рабочим только если исправить все фатальные ошибки и ворнинги.</p>
        <p>Определи минимальное количество коммитов, нужное для исправления всех багов. Напиши php-скрипт, который определит минимальное количество коммитов, 
        необходимых для исправления кода.</p>
        <h3>Входные данные</h3>
        <p>В форму на странице можно ввести два числа N, M (0 ≤ N, M ≤ 1000).</p>
        <h3>Выходные данные</h3>
        <p>Нужно вывести одно число – минимальное количество коммитов, или -1, если исправить код Пети невозможно.</p>
        <form action="" method="get">
            <label for="N">Количество фатальных ошибок (N):<br><input type="number" name="N" min="0" max="1000" required></label><br>
            <label for="M">Количество ворнингов (M):<br><input type="number" name="M" min="0" max="1000" required></label><br>
            <input type="submit" value="Решить">
        </form>
        <h3><?=solve();?></h3>
    </div>
</body>
</html>

